from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from models.order import Order, OrderType
from config import load_config
from sqlalchemy.orm import Session
from db import Session
from aiogram import types

router = Router()
config = load_config()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class OrderStates(StatesGroup):
    waiting_for_amount = State()
    waiting_for_percent = State()
    waiting_for_confirmation = State()

async def start(message: Message):
    if message.chat.type != "private":
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å USDTüíµ", callback_data="start_buy")],
        [InlineKeyboardButton(text="–ü—Ä–æ–¥–∞—Ç—å USDTüíµ", callback_data="start_sell")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await message.delete()

@router.message(Command("sell"))
async def sell_command(message: Message, state: FSMContext):
    if message.chat.type != "private":
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
        return
    await start_sell_order(message, state)

@router.message(Command("buy"))
async def buy_command(message: Message, state: FSMContext):
    if message.chat.type != "private":
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
        return
    await start_buy_order(message, state)

async def start_sell_order(event: types.Message or CallbackQuery, state: FSMContext):
    await state.update_data(order_type=OrderType.SELL)
    if isinstance(event, Message):
        await event.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–≤ USDTüíµ):")
    elif isinstance(event, CallbackQuery):
        await event.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–≤ USDTüíµ):")
    await state.set_state(OrderStates.waiting_for_amount)

async def start_buy_order(event: types.Message or CallbackQuery, state: FSMContext):
    await state.update_data(order_type=OrderType.BUY)
    if isinstance(event, Message):
        await event.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–≤ USDTüíµ):")
    elif isinstance(event, CallbackQuery):
        await event.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–≤ USDTüíµ):")
    await state.set_state(OrderStates.waiting_for_amount)

@router.message(OrderStates.waiting_for_amount)
async def enter_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        await state.update_data(amount=amount)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç:")
        await state.set_state(OrderStates.waiting_for_percent)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    await message.delete()

@router.message(OrderStates.waiting_for_percent)
async def enter_percent(message: Message, state: FSMContext):
    try:
        percent = float(message.text)
        await state.update_data(percent=percent)

        user_data = await state.get_data()
        amount = user_data['amount']
        order_type = user_data['order_type']

        order = Order(
            order_type=order_type,
            amount=amount,
            price=0,
            percent=percent,
            creator_username=message.from_user.username,
            creator_user_id=message.from_user.id
        )

        with Session() as session:
            session.add(order)
            session.commit()
            session.refresh(order)

        order_type_text = '–ü—Ä–æ–¥–∞–∂–∞' if order_type == OrderType.SELL else '–ü–æ–∫—É–ø–∫–∞'
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ä–¥–µ—Ä", callback_data=f"confirm_{order.id}")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä", callback_data=f"edit_{order.id}")],
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –æ—Ä–¥–µ—Ä", callback_data=f"delete_order_{order.id}")]
        ])

        await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –æ—Ä–¥–µ—Ä:\n"
                             f"–¢–∏–ø: {order_type_text}\n"
                             f"–°—É–º–º–∞: {amount} USDTüíµ\n–ü—Ä–æ—Ü–µ–Ω—Ç: {percent}%",
                             reply_markup=keyboard)
        await state.set_state(OrderStates.waiting_for_confirmation)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    await message.delete()

@router.message(Command("my_orders"))
async def my_orders(message: Message):
    with Session() as session:
        orders = session.query(Order).filter(Order.creator_user_id == message.from_user.id, Order.is_accepted == False).all()

    if not orders:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"–£–¥–∞–ª–∏—Ç—å –æ—Ä–¥–µ—Ä #{order.id} ({order.amount} USDT)",
                callback_data=f"delete_order_{order.id}"
            )
        ] for order in orders
    ])

    await message.answer("–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞:", reply_markup=keyboard)

@router.message(Command("admin_orders"))
async def admin_orders(message: Message):
    if message.from_user.id not in config.admin_chat_ids:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    with Session() as session:
        orders = session.query(Order).all()

    if not orders:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    for order in orders:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"–£–¥–∞–ª–∏—Ç—å –æ—Ä–¥–µ—Ä #{order.id} ({order.amount} USDT)",
                callback_data=f"admin_delete_order_{order.id}"
            )
        ])

    await message.answer("–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞:", reply_markup=keyboard)


@router.message(Command("orders"))
async def show_all_orders(message: Message):
    if message.chat.type != "private":
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
        return

    with Session() as session:
        orders = session.query(Order).all()
        if orders:
            orders_text = "\n\n".join([
                f"–û—Ä–¥–µ—Ä #{order.id}: {'–ü—Ä–æ–¥–∞–∂–∞' if order.order_type == OrderType.SELL else '–ü–æ–∫—É–ø–∫–∞'}\n"
                f"–°—É–º–º–∞: {order.amount} USDTüíµ\n–ü—Ä–æ—Ü–µ–Ω—Ç: {order.percent}%" for order in orders
            ])
            await message.answer(f"–í—Å–µ –æ—Ä–¥–µ—Ä–∞:\n\n{orders_text}")
        else:
            await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤.")
    await message.delete()

@router.message(Command("clear_orders"))
async def clear_orders(message: Message):
    if message.from_user.id not in config.admin_chat_ids:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    with Session() as session:
        session.query(Order).delete()
        session.commit()

    await message.answer("–ò—Å—Ç–æ—Ä–∏—è –æ—Ä–¥–µ—Ä–æ–≤ –æ—á–∏—â–µ–Ω–∞.")
    await message.delete()

def register_handlers(router: Router):
    router.message.register(start, Command(commands=["start"]))
    router.message.register(sell_command, Command(commands=["sell"]))
    router.message.register(buy_command, Command(commands=["buy"]))
    router.callback_query.register(start_sell_order, F.data == "start_sell")
    router.callback_query.register(start_buy_order, F.data == "start_buy")
    router.message.register(my_orders, Command(commands=["my_orders"]))
    router.message.register(enter_amount, OrderStates.waiting_for_amount)
    router.message.register(enter_percent, OrderStates.waiting_for_percent)
    router.message.register(show_all_orders, Command(commands=["orders"]))
    router.message.register(admin_orders, Command(commands=["admin_orders"]))
    router.message.register(clear_orders, Command(commands=["clear_orders"]))
