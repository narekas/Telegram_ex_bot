from aiogram import Router, types, Bot
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.orm import Session
from models.order import Order, OrderType
from db import Session
from config import load_config
from utils.file_utils import notify_admins
from handlers.commands import OrderStates
from aiogram.fsm.context import FSMContext
import asyncio

router = Router()
config = load_config()
bot = Bot(token=config.bot_token)

async def remove_accept_button_after_timeout(message: types.Message, order_id: int, timeout: int = 7200):
    await asyncio.sleep(timeout)
    with Session() as session:
        order = session.query(Order).filter(Order.id == order_id).first()
        if order and not order.is_accepted:
            await message.edit_reply_markup(reply_markup=None)

async def handle_confirm_order(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[1])

    with Session() as session:
        order = session.query(Order).filter(Order.id == order_id).first()

    if order:
        order_type_text = '–ü—Ä–æ–¥–∞–∂—É' if order.order_type == OrderType.SELL else '–ü–æ–∫—É–ø–∫—É'

        await callback.message.edit_reply_markup(reply_markup=None)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è", callback_data=f"accept_{order.id}")]
        ])

        message = await bot.send_message(
            chat_id=config.chat_id,
            text=(f"–ù–æ–≤—ã–π –æ—Ä–¥–µ—Ä #{order.id} –Ω–∞ {order_type_text}:\n"
                  f"–°—É–º–º–∞: {order.amount} USDTüíµ\n–ü—Ä–æ—Ü–µ–Ω—Ç: {order.percent}%\n"
                  f"–°–æ–∑–¥–∞—Ç–µ–ª—å: @{order.creator_username}"),
            reply_markup=keyboard
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞
        await notify_admins(
            text=(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –æ—Ä–¥–µ—Ä #{order.id}:\n"
                  f"–¢–∏–ø: {order_type_text}\n"
                  f"–°—É–º–º–∞: {order.amount} USDTüíµ\n–ü—Ä–æ—Ü–µ–Ω—Ç: {order.percent}%\n"
                  f"–°–æ–∑–¥–∞—Ç–µ–ª—å: @{order.creator_username}")
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –µ–≥–æ –æ—Ä–¥–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        await bot.send_message(
            chat_id=callback.from_user.id,
            text="–í–∞—à –æ—Ä–¥–µ—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É‚úÖ"
        )

        # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞
        asyncio.create_task(remove_accept_button_after_timeout(message, order.id))

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ä–¥–µ—Ä"
        new_order_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ä–¥–µ—Ä", callback_data="create_new_order")]
        ])

        await bot.send_message(
            chat_id=callback.from_user.id,
            text="–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ä–¥–µ—Ä?",
            reply_markup=new_order_keyboard
        )

    else:
        await bot.send_message(
            chat_id=callback.from_user.id,
            text="–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω."
        )


async def handle_delete_order(callback: CallbackQuery):
    data_parts = callback.data.split("_")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π
    if len(data_parts) < 3 or not data_parts[2].isdigit():
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    order_id = int(data_parts[2])

    with Session() as session:
        order = session.query(Order).filter(Order.id == order_id).first()

        if not order:
            await callback.message.answer("–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—ã—Ç–∞—é—â–∏–π—Å—è —É–¥–∞–ª–∏—Ç—å –æ—Ä–¥–µ—Ä, —è–≤–ª—è–µ—Ç—Å—è –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
        if order.creator_user_id != callback.from_user.id and not callback.data.startswith("admin_delete_"):
            await callback.message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ—Ä–¥–µ—Ä, —Ç–∞–∫ –∫–∞–∫ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ—Ä–¥–µ—Ä –Ω–µ –±—ã–ª –ø—Ä–∏–Ω—è—Ç, –µ—Å–ª–∏ —É–¥–∞–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—å
        if order.is_accepted and not callback.data.startswith("admin_delete_"):
            await callback.message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ—Ä–¥–µ—Ä, —Ç–∞–∫ –∫–∞–∫ –Ω–∞ –Ω–µ–≥–æ —É–∂–µ –¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ.")
            return

        # –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
        session.delete(order)
        session.commit()

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
        await callback.message.delete()

        await callback.message.answer("–û—Ä–¥–µ—Ä –±—ã–ª —É–¥–∞–ª–µ–Ω.")

async def handle_edit_order(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split("_")[1])

    with Session() as session:
        order = session.query(Order).filter(Order.id == order_id).first()

    if order:
        await state.update_data(order_id=order.id)
        await state.set_state(OrderStates.waiting_for_amount)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É (–≤ USDTüíµ):")
    else:
        await bot.send_message(
            chat_id=callback.from_user.id,
            text="–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω."
        )

async def handle_accept_order(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[1])

    with Session() as session:
        order = session.query(Order).filter(Order.id == order_id).first()

    if order:
        order.is_accepted = True  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
        session.commit()

    if order:
        order_type_text = '–ü—Ä–æ–¥–∞–∂–∞' if order.order_type == OrderType.SELL else '–ü–æ–∫—É–ø–∫–∞'

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –æ–Ω —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ –æ—Ä–¥–µ—Ä, –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
        await bot.send_message(
            chat_id=callback.from_user.id,
            text=(f"–í—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –Ω–∞ –æ—Ä–¥–µ—Ä #{order.id}:\n"
                  f"–¢–∏–ø: {order_type_text}\n"
                  f"–°—É–º–º–∞: {order.amount} USDTüíµ\n"
                  f"–ü—Ä–æ—Ü–µ–Ω—Ç: {order.percent}%\n\n"
                  f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –æ—Ä–¥–µ—Ä–∞: @{order.creator_username}")
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –æ—Ä–¥–µ—Ä–∞ –æ —Ç–æ–º, —á—Ç–æ –∫—Ç–æ-—Ç–æ —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ –æ—Ä–¥–µ—Ä
        await bot.send_message(
            chat_id=order.creator_user_id,
            text=(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ –≤–∞—à –æ—Ä–¥–µ—Ä #{order.id}:\n"
                  f"–¢–∏–ø: {order_type_text}\n"
                  f"–°—É–º–º–∞: {order.amount} USDTüíµ\n–ü—Ä–æ—Ü–µ–Ω—Ç: {order.percent}%")
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ —Ç–æ–º, —á—Ç–æ –∫—Ç–æ-—Ç–æ —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ –æ—Ä–¥–µ—Ä
        await notify_admins(
            text=(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ –æ—Ä–¥–µ—Ä #{order.id}:\n"
                  f"–¢–∏–ø: {order_type_text}\n"
                  f"–°—É–º–º–∞: {order.amount} USDTüíµ\n–ü—Ä–æ—Ü–µ–Ω—Ç: {order.percent}%\n"
                  f"–°–æ–∑–¥–∞—Ç–µ–ª—å: @{order.creator_username}")
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—â–∏–π —á–∞—Ç –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ—Ä–¥–µ—Ä–∞
        await bot.send_message(
            chat_id=config.chat_id,
            text=f"–û—Ä–¥–µ—Ä #{order.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –∑–∞–∫—Ä—ã—Ç –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–≥–ª–∞—à–µ–Ω–∏–π."
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        if callback.message:
            await callback.message.edit_reply_markup(reply_markup=None)

    else:
        await bot.send_message(
            chat_id=callback.from_user.id,
            text="–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω."
        )

async def handle_create_new_order(callback: CallbackQuery):
    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
    await bot.send_message(
        chat_id=callback.from_user.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å USDTüíµ", callback_data="start_buy")],
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–∞—Ç—å USDTüíµ", callback_data="start_sell")]
        ])
    )

def register_callback_handlers(router: Router):
    router.callback_query.register(handle_confirm_order, lambda c: c.data.startswith("confirm_"))
    router.callback_query.register(handle_delete_order, lambda c: c.data.startswith("delete_order_") or c.data.startswith("admin_delete_order_"))
    router.callback_query.register(handle_edit_order, lambda c: c.data.startswith("edit_"))
    router.callback_query.register(handle_accept_order, lambda c: c.data.startswith("accept_"))
    router.callback_query.register(handle_create_new_order, lambda c: c.data == "create_new_order")
